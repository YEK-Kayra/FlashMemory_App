
FlashMemory_App.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001258  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080013f0  080013f0  000113f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001400  08001400  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08001400  08001400  00011400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001408  08001408  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001408  08001408  00011408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800140c  0800140c  0001140c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001410  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  0800141c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  0800141c  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002ed9  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000dd4  00000000  00000000  00022f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000003d8  00000000  00000000  00023d30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000002be  00000000  00000000  00024108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00014382  00000000  00000000  000243c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00004a02  00000000  00000000  00038748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007efb8  00000000  00000000  0003d14a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000d80  00000000  00000000  000bc104  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000bce84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080013d8 	.word	0x080013d8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	080013d8 	.word	0x080013d8

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <FLASH_CheckBusy>:
/**Include header files */
#include "FlashOperations_APP.h"
#include "main.h"

//Kontrol edildi HAL ile uyumlu gözüküyor
void FLASH_CheckBusy(){
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
	 * This bit indicates that a Flash memory operation is in progress
	 * FLASH-SR bit is juct read from user. @arg 0 : no Flash memory operation ongoing
	 * 										@arg 1 : Flash memory operation ongoing
	 * Wait until BSY bit to be cleared
	 */
	while((FLASH->SR & FLASH_SR_BSY) != 0);
 80004d8:	bf00      	nop
 80004da:	4b06      	ldr	r3, [pc, #24]	; (80004f4 <FLASH_CheckBusy+0x20>)
 80004dc:	68db      	ldr	r3, [r3, #12]
 80004de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d1f9      	bne.n	80004da <FLASH_CheckBusy+0x6>
}
 80004e6:	bf00      	nop
 80004e8:	bf00      	nop
 80004ea:	46bd      	mov	sp, r7
 80004ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop
 80004f4:	40023c00 	.word	0x40023c00

080004f8 <FLASH_Unlocker>:


//Kontrol edildi HAL ile uyumlu gözüküyor
void FLASH_Unlocker(){
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0

	/*! Wait until BSY bit to be cleared */
	FLASH_CheckBusy();
 80004fc:	f7ff ffea 	bl	80004d4 <FLASH_CheckBusy>

	/*! These keys bits are about unlocking the memory for Read/Write Operations */
	FLASH->KEYR = FLASH_KEY_1;
 8000500:	4b04      	ldr	r3, [pc, #16]	; (8000514 <FLASH_Unlocker+0x1c>)
 8000502:	4a05      	ldr	r2, [pc, #20]	; (8000518 <FLASH_Unlocker+0x20>)
 8000504:	605a      	str	r2, [r3, #4]
	FLASH->KEYR = FLASH_KEY_2;
 8000506:	4b03      	ldr	r3, [pc, #12]	; (8000514 <FLASH_Unlocker+0x1c>)
 8000508:	4a04      	ldr	r2, [pc, #16]	; (800051c <FLASH_Unlocker+0x24>)
 800050a:	605a      	str	r2, [r3, #4]

	/*! Wait until BSY bit to be cleared */
	FLASH_CheckBusy();
 800050c:	f7ff ffe2 	bl	80004d4 <FLASH_CheckBusy>

}
 8000510:	bf00      	nop
 8000512:	bd80      	pop	{r7, pc}
 8000514:	40023c00 	.word	0x40023c00
 8000518:	45670123 	.word	0x45670123
 800051c:	cdef89ab 	.word	0xcdef89ab

08000520 <FLASH_Locker>:

//Kontrol edildi HAL ile uyumlu gözüküyor
void FLASH_Locker(){
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0


	FLASH_CheckBusy();
 8000524:	f7ff ffd6 	bl	80004d4 <FLASH_CheckBusy>
	 *  Write to FLASH_CR_LOCK only. When it is set, this bit indicates that the FLASH_CR register is locked.
	 *  It is cleared by hardware after detecting the unlock sequence.
	 *
	 *  In the event of an unsuccessful unlock operation, this bit remains set until the next reset.
	 */
	FLASH->CR |= FLASH_CR_LOCK;
 8000528:	4b04      	ldr	r3, [pc, #16]	; (800053c <FLASH_Locker+0x1c>)
 800052a:	691b      	ldr	r3, [r3, #16]
 800052c:	4a03      	ldr	r2, [pc, #12]	; (800053c <FLASH_Locker+0x1c>)
 800052e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000532:	6113      	str	r3, [r2, #16]

	/*! Wait until BSY bit to be cleared */
	FLASH_CheckBusy();
 8000534:	f7ff ffce 	bl	80004d4 <FLASH_CheckBusy>

}
 8000538:	bf00      	nop
 800053a:	bd80      	pop	{r7, pc}
 800053c:	40023c00 	.word	0x40023c00

08000540 <FLASH_Erase>:
//FLASH Erase structure object, We will adjust it according to our requirements.




HAL_StatusTypeDef FLASH_Erase(uint32_t  NumberOfSector, char EraseMode){
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
 8000548:	460b      	mov	r3, r1
 800054a:	70fb      	strb	r3, [r7, #3]

	/*! Wait until BSY bit to be cleared */
	FLASH_CheckBusy();
 800054c:	f7ff ffc2 	bl	80004d4 <FLASH_CheckBusy>

	/*! Clear Parallelsize bits of CR Register */
	FLASH->CR &= ~FLASH_CR_PSize_Clr; //Clear Parallelsize bits of CR Register.
 8000550:	4b20      	ldr	r3, [pc, #128]	; (80005d4 <FLASH_Erase+0x94>)
 8000552:	691b      	ldr	r3, [r3, #16]
 8000554:	4a1f      	ldr	r2, [pc, #124]	; (80005d4 <FLASH_Erase+0x94>)
 8000556:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800055a:	6113      	str	r3, [r2, #16]
		  *            @arg FLASH_VOLTAGE_RANGE_3: when the device voltage range is 2.7V to 3.6V,
		  *                                  the operation will be done by word (32-bit)
		  *            @arg FLASH_VOLTAGE_RANGE_4: when the device voltage range is 2.7V to 3.6V + External Vpp,
		  *                                  the operation will be done by double word (64-bit)
	   */
	  FLASH->CR |= FLASH_VOLTAGE_RANGE_3<<8;
 800055c:	4b1d      	ldr	r3, [pc, #116]	; (80005d4 <FLASH_Erase+0x94>)
 800055e:	691b      	ldr	r3, [r3, #16]
 8000560:	4a1c      	ldr	r2, [pc, #112]	; (80005d4 <FLASH_Erase+0x94>)
 8000562:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000566:	6113      	str	r3, [r2, #16]

	 /*! Clear Number of Sectors bits of CR Register */
	  FLASH->CR &= ~FLASH_CR_SNb_Clr;
 8000568:	4b1a      	ldr	r3, [pc, #104]	; (80005d4 <FLASH_Erase+0x94>)
 800056a:	691b      	ldr	r3, [r3, #16]
 800056c:	4a19      	ldr	r2, [pc, #100]	; (80005d4 <FLASH_Erase+0x94>)
 800056e:	f023 0378 	bic.w	r3, r3, #120	; 0x78
 8000572:	6113      	str	r3, [r2, #16]

	  switch (EraseMode){
 8000574:	78fb      	ldrb	r3, [r7, #3]
 8000576:	2b4d      	cmp	r3, #77	; 0x4d
 8000578:	d002      	beq.n	8000580 <FLASH_Erase+0x40>
 800057a:	2b53      	cmp	r3, #83	; 0x53
 800057c:	d012      	beq.n	80005a4 <FLASH_Erase+0x64>
 800057e:	e023      	b.n	80005c8 <FLASH_Erase+0x88>

	  case 'M' :

	  FLASH->CR |= FLASH_CR_MER | (NumberOfSector << FLASH_CR_SNb_Pos);
 8000580:	4b14      	ldr	r3, [pc, #80]	; (80005d4 <FLASH_Erase+0x94>)
 8000582:	691a      	ldr	r2, [r3, #16]
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	00db      	lsls	r3, r3, #3
 8000588:	4313      	orrs	r3, r2
 800058a:	4a12      	ldr	r2, [pc, #72]	; (80005d4 <FLASH_Erase+0x94>)
 800058c:	f043 0304 	orr.w	r3, r3, #4
 8000590:	6113      	str	r3, [r2, #16]
	  FLASH->CR |= FLASH_CR_STRT;
 8000592:	4b10      	ldr	r3, [pc, #64]	; (80005d4 <FLASH_Erase+0x94>)
 8000594:	691b      	ldr	r3, [r3, #16]
 8000596:	4a0f      	ldr	r2, [pc, #60]	; (80005d4 <FLASH_Erase+0x94>)
 8000598:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800059c:	6113      	str	r3, [r2, #16]
	  FLASH_CheckBusy();
 800059e:	f7ff ff99 	bl	80004d4 <FLASH_CheckBusy>
	  break;
 80005a2:	e011      	b.n	80005c8 <FLASH_Erase+0x88>

	  case 'S' :
	  FLASH->CR |= FLASH_CR_SER | (NumberOfSector << FLASH_CR_SNb_Pos);
 80005a4:	4b0b      	ldr	r3, [pc, #44]	; (80005d4 <FLASH_Erase+0x94>)
 80005a6:	691a      	ldr	r2, [r3, #16]
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	00db      	lsls	r3, r3, #3
 80005ac:	4313      	orrs	r3, r2
 80005ae:	4a09      	ldr	r2, [pc, #36]	; (80005d4 <FLASH_Erase+0x94>)
 80005b0:	f043 0302 	orr.w	r3, r3, #2
 80005b4:	6113      	str	r3, [r2, #16]
	  FLASH->CR |= FLASH_CR_STRT;
 80005b6:	4b07      	ldr	r3, [pc, #28]	; (80005d4 <FLASH_Erase+0x94>)
 80005b8:	691b      	ldr	r3, [r3, #16]
 80005ba:	4a06      	ldr	r2, [pc, #24]	; (80005d4 <FLASH_Erase+0x94>)
 80005bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005c0:	6113      	str	r3, [r2, #16]
	  FLASH_CheckBusy();
 80005c2:	f7ff ff87 	bl	80004d4 <FLASH_CheckBusy>
	  break;
 80005c6:	bf00      	nop
	}
	  return HAL_OK;
 80005c8:	2300      	movs	r3, #0
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	3708      	adds	r7, #8
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	40023c00 	.word	0x40023c00

080005d8 <FLASH_Write>:


HAL_StatusTypeDef FLASH_Write(uint32_t SectorAddress , uint16_t UserData){
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
 80005e0:	460b      	mov	r3, r1
 80005e2:	807b      	strh	r3, [r7, #2]



	FLASH_CheckBusy();
 80005e4:	f7ff ff76 	bl	80004d4 <FLASH_CheckBusy>
	FLASH->CR &= ~FLASH_CR_PSize_Clr; 			//Clear Parallelsize bits of CR Register.
 80005e8:	4b0d      	ldr	r3, [pc, #52]	; (8000620 <FLASH_Write+0x48>)
 80005ea:	691b      	ldr	r3, [r3, #16]
 80005ec:	4a0c      	ldr	r2, [pc, #48]	; (8000620 <FLASH_Write+0x48>)
 80005ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80005f2:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80005f4:	4b0a      	ldr	r3, [pc, #40]	; (8000620 <FLASH_Write+0x48>)
 80005f6:	691b      	ldr	r3, [r3, #16]
 80005f8:	4a09      	ldr	r2, [pc, #36]	; (8000620 <FLASH_Write+0x48>)
 80005fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005fe:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_PG;
 8000600:	4b07      	ldr	r3, [pc, #28]	; (8000620 <FLASH_Write+0x48>)
 8000602:	691b      	ldr	r3, [r3, #16]
 8000604:	4a06      	ldr	r2, [pc, #24]	; (8000620 <FLASH_Write+0x48>)
 8000606:	f043 0301 	orr.w	r3, r3, #1
 800060a:	6113      	str	r3, [r2, #16]
	*(__IO uint16_t*)SectorAddress = UserData;	//Sending data to the Address
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	887a      	ldrh	r2, [r7, #2]
 8000610:	801a      	strh	r2, [r3, #0]

	FLASH_CheckBusy();
 8000612:	f7ff ff5f 	bl	80004d4 <FLASH_CheckBusy>

	return HAL_OK;
 8000616:	2300      	movs	r3, #0

}
 8000618:	4618      	mov	r0, r3
 800061a:	3708      	adds	r7, #8
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	40023c00 	.word	0x40023c00

08000624 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000628:	f000 f92e 	bl	8000888 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800062c:	f000 f812 	bl	8000654 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000630:	f000 f86e 	bl	8000710 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  FLASH_Unlocker();
 8000634:	f7ff ff60 	bl	80004f8 <FLASH_Unlocker>
  FLASH_Erase(4, '4');
 8000638:	2134      	movs	r1, #52	; 0x34
 800063a:	2004      	movs	r0, #4
 800063c:	f7ff ff80 	bl	8000540 <FLASH_Erase>
  FLASH_Write(0x08020000  , 12);
 8000640:	210c      	movs	r1, #12
 8000642:	4803      	ldr	r0, [pc, #12]	; (8000650 <main+0x2c>)
 8000644:	f7ff ffc8 	bl	80005d8 <FLASH_Write>
  FLASH_Locker();
 8000648:	f7ff ff6a 	bl	8000520 <FLASH_Locker>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800064c:	e7fe      	b.n	800064c <main+0x28>
 800064e:	bf00      	nop
 8000650:	08020000 	.word	0x08020000

08000654 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b094      	sub	sp, #80	; 0x50
 8000658:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065a:	f107 0320 	add.w	r3, r7, #32
 800065e:	2230      	movs	r2, #48	; 0x30
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f000 fe8c 	bl	8001380 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000668:	f107 030c 	add.w	r3, r7, #12
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]
 8000672:	609a      	str	r2, [r3, #8]
 8000674:	60da      	str	r2, [r3, #12]
 8000676:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000678:	2300      	movs	r3, #0
 800067a:	60bb      	str	r3, [r7, #8]
 800067c:	4b22      	ldr	r3, [pc, #136]	; (8000708 <SystemClock_Config+0xb4>)
 800067e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000680:	4a21      	ldr	r2, [pc, #132]	; (8000708 <SystemClock_Config+0xb4>)
 8000682:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000686:	6413      	str	r3, [r2, #64]	; 0x40
 8000688:	4b1f      	ldr	r3, [pc, #124]	; (8000708 <SystemClock_Config+0xb4>)
 800068a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000690:	60bb      	str	r3, [r7, #8]
 8000692:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000694:	2300      	movs	r3, #0
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	4b1c      	ldr	r3, [pc, #112]	; (800070c <SystemClock_Config+0xb8>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a1b      	ldr	r2, [pc, #108]	; (800070c <SystemClock_Config+0xb8>)
 800069e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006a2:	6013      	str	r3, [r2, #0]
 80006a4:	4b19      	ldr	r3, [pc, #100]	; (800070c <SystemClock_Config+0xb8>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006ac:	607b      	str	r3, [r7, #4]
 80006ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b0:	2302      	movs	r3, #2
 80006b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b4:	2301      	movs	r3, #1
 80006b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b8:	2310      	movs	r3, #16
 80006ba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006bc:	2300      	movs	r3, #0
 80006be:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c0:	f107 0320 	add.w	r3, r7, #32
 80006c4:	4618      	mov	r0, r3
 80006c6:	f000 fa37 	bl	8000b38 <HAL_RCC_OscConfig>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80006d0:	f000 f846 	bl	8000760 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d4:	230f      	movs	r3, #15
 80006d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006d8:	2300      	movs	r3, #0
 80006da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006dc:	2300      	movs	r3, #0
 80006de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006e8:	f107 030c 	add.w	r3, r7, #12
 80006ec:	2100      	movs	r1, #0
 80006ee:	4618      	mov	r0, r3
 80006f0:	f000 fc9a 	bl	8001028 <HAL_RCC_ClockConfig>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80006fa:	f000 f831 	bl	8000760 <Error_Handler>
  }
}
 80006fe:	bf00      	nop
 8000700:	3750      	adds	r7, #80	; 0x50
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	40023800 	.word	0x40023800
 800070c:	40007000 	.word	0x40007000

08000710 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	607b      	str	r3, [r7, #4]
 800071a:	4b10      	ldr	r3, [pc, #64]	; (800075c <MX_GPIO_Init+0x4c>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	4a0f      	ldr	r2, [pc, #60]	; (800075c <MX_GPIO_Init+0x4c>)
 8000720:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000724:	6313      	str	r3, [r2, #48]	; 0x30
 8000726:	4b0d      	ldr	r3, [pc, #52]	; (800075c <MX_GPIO_Init+0x4c>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	603b      	str	r3, [r7, #0]
 8000736:	4b09      	ldr	r3, [pc, #36]	; (800075c <MX_GPIO_Init+0x4c>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4a08      	ldr	r2, [pc, #32]	; (800075c <MX_GPIO_Init+0x4c>)
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b06      	ldr	r3, [pc, #24]	; (800075c <MX_GPIO_Init+0x4c>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f003 0301 	and.w	r3, r3, #1
 800074a:	603b      	str	r3, [r7, #0]
 800074c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800074e:	bf00      	nop
 8000750:	370c      	adds	r7, #12
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	40023800 	.word	0x40023800

08000760 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000764:	b672      	cpsid	i
}
 8000766:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000768:	e7fe      	b.n	8000768 <Error_Handler+0x8>
	...

0800076c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	607b      	str	r3, [r7, #4]
 8000776:	4b10      	ldr	r3, [pc, #64]	; (80007b8 <HAL_MspInit+0x4c>)
 8000778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800077a:	4a0f      	ldr	r2, [pc, #60]	; (80007b8 <HAL_MspInit+0x4c>)
 800077c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000780:	6453      	str	r3, [r2, #68]	; 0x44
 8000782:	4b0d      	ldr	r3, [pc, #52]	; (80007b8 <HAL_MspInit+0x4c>)
 8000784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000786:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	603b      	str	r3, [r7, #0]
 8000792:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <HAL_MspInit+0x4c>)
 8000794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000796:	4a08      	ldr	r2, [pc, #32]	; (80007b8 <HAL_MspInit+0x4c>)
 8000798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800079c:	6413      	str	r3, [r2, #64]	; 0x40
 800079e:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <HAL_MspInit+0x4c>)
 80007a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007a6:	603b      	str	r3, [r7, #0]
 80007a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007aa:	bf00      	nop
 80007ac:	370c      	adds	r7, #12
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	40023800 	.word	0x40023800

080007bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007c0:	e7fe      	b.n	80007c0 <NMI_Handler+0x4>

080007c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007c2:	b480      	push	{r7}
 80007c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007c6:	e7fe      	b.n	80007c6 <HardFault_Handler+0x4>

080007c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007cc:	e7fe      	b.n	80007cc <MemManage_Handler+0x4>

080007ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007ce:	b480      	push	{r7}
 80007d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007d2:	e7fe      	b.n	80007d2 <BusFault_Handler+0x4>

080007d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007d8:	e7fe      	b.n	80007d8 <UsageFault_Handler+0x4>

080007da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007da:	b480      	push	{r7}
 80007dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007de:	bf00      	nop
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr

080007e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007ec:	bf00      	nop
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr

080007f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007f6:	b480      	push	{r7}
 80007f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007fa:	bf00      	nop
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr

08000804 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000808:	f000 f890 	bl	800092c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800080c:	bf00      	nop
 800080e:	bd80      	pop	{r7, pc}

08000810 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000814:	4b06      	ldr	r3, [pc, #24]	; (8000830 <SystemInit+0x20>)
 8000816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800081a:	4a05      	ldr	r2, [pc, #20]	; (8000830 <SystemInit+0x20>)
 800081c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000820:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000824:	bf00      	nop
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	e000ed00 	.word	0xe000ed00

08000834 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000834:	f8df d034 	ldr.w	sp, [pc, #52]	; 800086c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000838:	480d      	ldr	r0, [pc, #52]	; (8000870 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800083a:	490e      	ldr	r1, [pc, #56]	; (8000874 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800083c:	4a0e      	ldr	r2, [pc, #56]	; (8000878 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800083e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000840:	e002      	b.n	8000848 <LoopCopyDataInit>

08000842 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000842:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000844:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000846:	3304      	adds	r3, #4

08000848 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000848:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800084a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800084c:	d3f9      	bcc.n	8000842 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800084e:	4a0b      	ldr	r2, [pc, #44]	; (800087c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000850:	4c0b      	ldr	r4, [pc, #44]	; (8000880 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000852:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000854:	e001      	b.n	800085a <LoopFillZerobss>

08000856 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000856:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000858:	3204      	adds	r2, #4

0800085a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800085a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800085c:	d3fb      	bcc.n	8000856 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800085e:	f7ff ffd7 	bl	8000810 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000862:	f000 fd95 	bl	8001390 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000866:	f7ff fedd 	bl	8000624 <main>
  bx  lr    
 800086a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800086c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000870:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000874:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000878:	08001410 	.word	0x08001410
  ldr r2, =_sbss
 800087c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000880:	2000002c 	.word	0x2000002c

08000884 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000884:	e7fe      	b.n	8000884 <ADC_IRQHandler>
	...

08000888 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800088c:	4b0e      	ldr	r3, [pc, #56]	; (80008c8 <HAL_Init+0x40>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a0d      	ldr	r2, [pc, #52]	; (80008c8 <HAL_Init+0x40>)
 8000892:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000896:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000898:	4b0b      	ldr	r3, [pc, #44]	; (80008c8 <HAL_Init+0x40>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a0a      	ldr	r2, [pc, #40]	; (80008c8 <HAL_Init+0x40>)
 800089e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008a4:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <HAL_Init+0x40>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a07      	ldr	r2, [pc, #28]	; (80008c8 <HAL_Init+0x40>)
 80008aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008b0:	2003      	movs	r0, #3
 80008b2:	f000 f90d 	bl	8000ad0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008b6:	200f      	movs	r0, #15
 80008b8:	f000 f808 	bl	80008cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008bc:	f7ff ff56 	bl	800076c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008c0:	2300      	movs	r3, #0
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40023c00 	.word	0x40023c00

080008cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008d4:	4b12      	ldr	r3, [pc, #72]	; (8000920 <HAL_InitTick+0x54>)
 80008d6:	681a      	ldr	r2, [r3, #0]
 80008d8:	4b12      	ldr	r3, [pc, #72]	; (8000924 <HAL_InitTick+0x58>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	4619      	mov	r1, r3
 80008de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80008e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80008ea:	4618      	mov	r0, r3
 80008ec:	f000 f917 	bl	8000b1e <HAL_SYSTICK_Config>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008f6:	2301      	movs	r3, #1
 80008f8:	e00e      	b.n	8000918 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	2b0f      	cmp	r3, #15
 80008fe:	d80a      	bhi.n	8000916 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000900:	2200      	movs	r2, #0
 8000902:	6879      	ldr	r1, [r7, #4]
 8000904:	f04f 30ff 	mov.w	r0, #4294967295
 8000908:	f000 f8ed 	bl	8000ae6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800090c:	4a06      	ldr	r2, [pc, #24]	; (8000928 <HAL_InitTick+0x5c>)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000912:	2300      	movs	r3, #0
 8000914:	e000      	b.n	8000918 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000916:	2301      	movs	r3, #1
}
 8000918:	4618      	mov	r0, r3
 800091a:	3708      	adds	r7, #8
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	20000000 	.word	0x20000000
 8000924:	20000008 	.word	0x20000008
 8000928:	20000004 	.word	0x20000004

0800092c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000930:	4b06      	ldr	r3, [pc, #24]	; (800094c <HAL_IncTick+0x20>)
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	461a      	mov	r2, r3
 8000936:	4b06      	ldr	r3, [pc, #24]	; (8000950 <HAL_IncTick+0x24>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	4413      	add	r3, r2
 800093c:	4a04      	ldr	r2, [pc, #16]	; (8000950 <HAL_IncTick+0x24>)
 800093e:	6013      	str	r3, [r2, #0]
}
 8000940:	bf00      	nop
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	20000008 	.word	0x20000008
 8000950:	20000028 	.word	0x20000028

08000954 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  return uwTick;
 8000958:	4b03      	ldr	r3, [pc, #12]	; (8000968 <HAL_GetTick+0x14>)
 800095a:	681b      	ldr	r3, [r3, #0]
}
 800095c:	4618      	mov	r0, r3
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	20000028 	.word	0x20000028

0800096c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800096c:	b480      	push	{r7}
 800096e:	b085      	sub	sp, #20
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	f003 0307 	and.w	r3, r3, #7
 800097a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800097c:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <__NVIC_SetPriorityGrouping+0x44>)
 800097e:	68db      	ldr	r3, [r3, #12]
 8000980:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000982:	68ba      	ldr	r2, [r7, #8]
 8000984:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000988:	4013      	ands	r3, r2
 800098a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000990:	68bb      	ldr	r3, [r7, #8]
 8000992:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000994:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000998:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800099c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800099e:	4a04      	ldr	r2, [pc, #16]	; (80009b0 <__NVIC_SetPriorityGrouping+0x44>)
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	60d3      	str	r3, [r2, #12]
}
 80009a4:	bf00      	nop
 80009a6:	3714      	adds	r7, #20
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr
 80009b0:	e000ed00 	.word	0xe000ed00

080009b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009b8:	4b04      	ldr	r3, [pc, #16]	; (80009cc <__NVIC_GetPriorityGrouping+0x18>)
 80009ba:	68db      	ldr	r3, [r3, #12]
 80009bc:	0a1b      	lsrs	r3, r3, #8
 80009be:	f003 0307 	and.w	r3, r3, #7
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr
 80009cc:	e000ed00 	.word	0xe000ed00

080009d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	4603      	mov	r3, r0
 80009d8:	6039      	str	r1, [r7, #0]
 80009da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	db0a      	blt.n	80009fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	b2da      	uxtb	r2, r3
 80009e8:	490c      	ldr	r1, [pc, #48]	; (8000a1c <__NVIC_SetPriority+0x4c>)
 80009ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ee:	0112      	lsls	r2, r2, #4
 80009f0:	b2d2      	uxtb	r2, r2
 80009f2:	440b      	add	r3, r1
 80009f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009f8:	e00a      	b.n	8000a10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	b2da      	uxtb	r2, r3
 80009fe:	4908      	ldr	r1, [pc, #32]	; (8000a20 <__NVIC_SetPriority+0x50>)
 8000a00:	79fb      	ldrb	r3, [r7, #7]
 8000a02:	f003 030f 	and.w	r3, r3, #15
 8000a06:	3b04      	subs	r3, #4
 8000a08:	0112      	lsls	r2, r2, #4
 8000a0a:	b2d2      	uxtb	r2, r2
 8000a0c:	440b      	add	r3, r1
 8000a0e:	761a      	strb	r2, [r3, #24]
}
 8000a10:	bf00      	nop
 8000a12:	370c      	adds	r7, #12
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr
 8000a1c:	e000e100 	.word	0xe000e100
 8000a20:	e000ed00 	.word	0xe000ed00

08000a24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b089      	sub	sp, #36	; 0x24
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	60f8      	str	r0, [r7, #12]
 8000a2c:	60b9      	str	r1, [r7, #8]
 8000a2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	f003 0307 	and.w	r3, r3, #7
 8000a36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a38:	69fb      	ldr	r3, [r7, #28]
 8000a3a:	f1c3 0307 	rsb	r3, r3, #7
 8000a3e:	2b04      	cmp	r3, #4
 8000a40:	bf28      	it	cs
 8000a42:	2304      	movcs	r3, #4
 8000a44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a46:	69fb      	ldr	r3, [r7, #28]
 8000a48:	3304      	adds	r3, #4
 8000a4a:	2b06      	cmp	r3, #6
 8000a4c:	d902      	bls.n	8000a54 <NVIC_EncodePriority+0x30>
 8000a4e:	69fb      	ldr	r3, [r7, #28]
 8000a50:	3b03      	subs	r3, #3
 8000a52:	e000      	b.n	8000a56 <NVIC_EncodePriority+0x32>
 8000a54:	2300      	movs	r3, #0
 8000a56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a58:	f04f 32ff 	mov.w	r2, #4294967295
 8000a5c:	69bb      	ldr	r3, [r7, #24]
 8000a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a62:	43da      	mvns	r2, r3
 8000a64:	68bb      	ldr	r3, [r7, #8]
 8000a66:	401a      	ands	r2, r3
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	fa01 f303 	lsl.w	r3, r1, r3
 8000a76:	43d9      	mvns	r1, r3
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a7c:	4313      	orrs	r3, r2
         );
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	3724      	adds	r7, #36	; 0x24
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
	...

08000a8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	3b01      	subs	r3, #1
 8000a98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a9c:	d301      	bcc.n	8000aa2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	e00f      	b.n	8000ac2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aa2:	4a0a      	ldr	r2, [pc, #40]	; (8000acc <SysTick_Config+0x40>)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	3b01      	subs	r3, #1
 8000aa8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000aaa:	210f      	movs	r1, #15
 8000aac:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab0:	f7ff ff8e 	bl	80009d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ab4:	4b05      	ldr	r3, [pc, #20]	; (8000acc <SysTick_Config+0x40>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000aba:	4b04      	ldr	r3, [pc, #16]	; (8000acc <SysTick_Config+0x40>)
 8000abc:	2207      	movs	r2, #7
 8000abe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ac0:	2300      	movs	r3, #0
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	3708      	adds	r7, #8
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	e000e010 	.word	0xe000e010

08000ad0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ad8:	6878      	ldr	r0, [r7, #4]
 8000ada:	f7ff ff47 	bl	800096c <__NVIC_SetPriorityGrouping>
}
 8000ade:	bf00      	nop
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}

08000ae6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ae6:	b580      	push	{r7, lr}
 8000ae8:	b086      	sub	sp, #24
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	4603      	mov	r3, r0
 8000aee:	60b9      	str	r1, [r7, #8]
 8000af0:	607a      	str	r2, [r7, #4]
 8000af2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000af4:	2300      	movs	r3, #0
 8000af6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000af8:	f7ff ff5c 	bl	80009b4 <__NVIC_GetPriorityGrouping>
 8000afc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000afe:	687a      	ldr	r2, [r7, #4]
 8000b00:	68b9      	ldr	r1, [r7, #8]
 8000b02:	6978      	ldr	r0, [r7, #20]
 8000b04:	f7ff ff8e 	bl	8000a24 <NVIC_EncodePriority>
 8000b08:	4602      	mov	r2, r0
 8000b0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b0e:	4611      	mov	r1, r2
 8000b10:	4618      	mov	r0, r3
 8000b12:	f7ff ff5d 	bl	80009d0 <__NVIC_SetPriority>
}
 8000b16:	bf00      	nop
 8000b18:	3718      	adds	r7, #24
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}

08000b1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b1e:	b580      	push	{r7, lr}
 8000b20:	b082      	sub	sp, #8
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b26:	6878      	ldr	r0, [r7, #4]
 8000b28:	f7ff ffb0 	bl	8000a8c <SysTick_Config>
 8000b2c:	4603      	mov	r3, r0
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3708      	adds	r7, #8
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
	...

08000b38 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b086      	sub	sp, #24
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d101      	bne.n	8000b4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b46:	2301      	movs	r3, #1
 8000b48:	e267      	b.n	800101a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	f003 0301 	and.w	r3, r3, #1
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d075      	beq.n	8000c42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000b56:	4b88      	ldr	r3, [pc, #544]	; (8000d78 <HAL_RCC_OscConfig+0x240>)
 8000b58:	689b      	ldr	r3, [r3, #8]
 8000b5a:	f003 030c 	and.w	r3, r3, #12
 8000b5e:	2b04      	cmp	r3, #4
 8000b60:	d00c      	beq.n	8000b7c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b62:	4b85      	ldr	r3, [pc, #532]	; (8000d78 <HAL_RCC_OscConfig+0x240>)
 8000b64:	689b      	ldr	r3, [r3, #8]
 8000b66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000b6a:	2b08      	cmp	r3, #8
 8000b6c:	d112      	bne.n	8000b94 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b6e:	4b82      	ldr	r3, [pc, #520]	; (8000d78 <HAL_RCC_OscConfig+0x240>)
 8000b70:	685b      	ldr	r3, [r3, #4]
 8000b72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000b7a:	d10b      	bne.n	8000b94 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b7c:	4b7e      	ldr	r3, [pc, #504]	; (8000d78 <HAL_RCC_OscConfig+0x240>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d05b      	beq.n	8000c40 <HAL_RCC_OscConfig+0x108>
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d157      	bne.n	8000c40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000b90:	2301      	movs	r3, #1
 8000b92:	e242      	b.n	800101a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b9c:	d106      	bne.n	8000bac <HAL_RCC_OscConfig+0x74>
 8000b9e:	4b76      	ldr	r3, [pc, #472]	; (8000d78 <HAL_RCC_OscConfig+0x240>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4a75      	ldr	r2, [pc, #468]	; (8000d78 <HAL_RCC_OscConfig+0x240>)
 8000ba4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ba8:	6013      	str	r3, [r2, #0]
 8000baa:	e01d      	b.n	8000be8 <HAL_RCC_OscConfig+0xb0>
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000bb4:	d10c      	bne.n	8000bd0 <HAL_RCC_OscConfig+0x98>
 8000bb6:	4b70      	ldr	r3, [pc, #448]	; (8000d78 <HAL_RCC_OscConfig+0x240>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4a6f      	ldr	r2, [pc, #444]	; (8000d78 <HAL_RCC_OscConfig+0x240>)
 8000bbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bc0:	6013      	str	r3, [r2, #0]
 8000bc2:	4b6d      	ldr	r3, [pc, #436]	; (8000d78 <HAL_RCC_OscConfig+0x240>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4a6c      	ldr	r2, [pc, #432]	; (8000d78 <HAL_RCC_OscConfig+0x240>)
 8000bc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bcc:	6013      	str	r3, [r2, #0]
 8000bce:	e00b      	b.n	8000be8 <HAL_RCC_OscConfig+0xb0>
 8000bd0:	4b69      	ldr	r3, [pc, #420]	; (8000d78 <HAL_RCC_OscConfig+0x240>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a68      	ldr	r2, [pc, #416]	; (8000d78 <HAL_RCC_OscConfig+0x240>)
 8000bd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bda:	6013      	str	r3, [r2, #0]
 8000bdc:	4b66      	ldr	r3, [pc, #408]	; (8000d78 <HAL_RCC_OscConfig+0x240>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a65      	ldr	r2, [pc, #404]	; (8000d78 <HAL_RCC_OscConfig+0x240>)
 8000be2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000be6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d013      	beq.n	8000c18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bf0:	f7ff feb0 	bl	8000954 <HAL_GetTick>
 8000bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bf6:	e008      	b.n	8000c0a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000bf8:	f7ff feac 	bl	8000954 <HAL_GetTick>
 8000bfc:	4602      	mov	r2, r0
 8000bfe:	693b      	ldr	r3, [r7, #16]
 8000c00:	1ad3      	subs	r3, r2, r3
 8000c02:	2b64      	cmp	r3, #100	; 0x64
 8000c04:	d901      	bls.n	8000c0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000c06:	2303      	movs	r3, #3
 8000c08:	e207      	b.n	800101a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c0a:	4b5b      	ldr	r3, [pc, #364]	; (8000d78 <HAL_RCC_OscConfig+0x240>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d0f0      	beq.n	8000bf8 <HAL_RCC_OscConfig+0xc0>
 8000c16:	e014      	b.n	8000c42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c18:	f7ff fe9c 	bl	8000954 <HAL_GetTick>
 8000c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c1e:	e008      	b.n	8000c32 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c20:	f7ff fe98 	bl	8000954 <HAL_GetTick>
 8000c24:	4602      	mov	r2, r0
 8000c26:	693b      	ldr	r3, [r7, #16]
 8000c28:	1ad3      	subs	r3, r2, r3
 8000c2a:	2b64      	cmp	r3, #100	; 0x64
 8000c2c:	d901      	bls.n	8000c32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000c2e:	2303      	movs	r3, #3
 8000c30:	e1f3      	b.n	800101a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c32:	4b51      	ldr	r3, [pc, #324]	; (8000d78 <HAL_RCC_OscConfig+0x240>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d1f0      	bne.n	8000c20 <HAL_RCC_OscConfig+0xe8>
 8000c3e:	e000      	b.n	8000c42 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	f003 0302 	and.w	r3, r3, #2
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d063      	beq.n	8000d16 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000c4e:	4b4a      	ldr	r3, [pc, #296]	; (8000d78 <HAL_RCC_OscConfig+0x240>)
 8000c50:	689b      	ldr	r3, [r3, #8]
 8000c52:	f003 030c 	and.w	r3, r3, #12
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d00b      	beq.n	8000c72 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c5a:	4b47      	ldr	r3, [pc, #284]	; (8000d78 <HAL_RCC_OscConfig+0x240>)
 8000c5c:	689b      	ldr	r3, [r3, #8]
 8000c5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000c62:	2b08      	cmp	r3, #8
 8000c64:	d11c      	bne.n	8000ca0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c66:	4b44      	ldr	r3, [pc, #272]	; (8000d78 <HAL_RCC_OscConfig+0x240>)
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d116      	bne.n	8000ca0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c72:	4b41      	ldr	r3, [pc, #260]	; (8000d78 <HAL_RCC_OscConfig+0x240>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f003 0302 	and.w	r3, r3, #2
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d005      	beq.n	8000c8a <HAL_RCC_OscConfig+0x152>
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	68db      	ldr	r3, [r3, #12]
 8000c82:	2b01      	cmp	r3, #1
 8000c84:	d001      	beq.n	8000c8a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000c86:	2301      	movs	r3, #1
 8000c88:	e1c7      	b.n	800101a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c8a:	4b3b      	ldr	r3, [pc, #236]	; (8000d78 <HAL_RCC_OscConfig+0x240>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	691b      	ldr	r3, [r3, #16]
 8000c96:	00db      	lsls	r3, r3, #3
 8000c98:	4937      	ldr	r1, [pc, #220]	; (8000d78 <HAL_RCC_OscConfig+0x240>)
 8000c9a:	4313      	orrs	r3, r2
 8000c9c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c9e:	e03a      	b.n	8000d16 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	68db      	ldr	r3, [r3, #12]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d020      	beq.n	8000cea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ca8:	4b34      	ldr	r3, [pc, #208]	; (8000d7c <HAL_RCC_OscConfig+0x244>)
 8000caa:	2201      	movs	r2, #1
 8000cac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cae:	f7ff fe51 	bl	8000954 <HAL_GetTick>
 8000cb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cb4:	e008      	b.n	8000cc8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000cb6:	f7ff fe4d 	bl	8000954 <HAL_GetTick>
 8000cba:	4602      	mov	r2, r0
 8000cbc:	693b      	ldr	r3, [r7, #16]
 8000cbe:	1ad3      	subs	r3, r2, r3
 8000cc0:	2b02      	cmp	r3, #2
 8000cc2:	d901      	bls.n	8000cc8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	e1a8      	b.n	800101a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cc8:	4b2b      	ldr	r3, [pc, #172]	; (8000d78 <HAL_RCC_OscConfig+0x240>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f003 0302 	and.w	r3, r3, #2
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d0f0      	beq.n	8000cb6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cd4:	4b28      	ldr	r3, [pc, #160]	; (8000d78 <HAL_RCC_OscConfig+0x240>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	691b      	ldr	r3, [r3, #16]
 8000ce0:	00db      	lsls	r3, r3, #3
 8000ce2:	4925      	ldr	r1, [pc, #148]	; (8000d78 <HAL_RCC_OscConfig+0x240>)
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	600b      	str	r3, [r1, #0]
 8000ce8:	e015      	b.n	8000d16 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000cea:	4b24      	ldr	r3, [pc, #144]	; (8000d7c <HAL_RCC_OscConfig+0x244>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cf0:	f7ff fe30 	bl	8000954 <HAL_GetTick>
 8000cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000cf6:	e008      	b.n	8000d0a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000cf8:	f7ff fe2c 	bl	8000954 <HAL_GetTick>
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	693b      	ldr	r3, [r7, #16]
 8000d00:	1ad3      	subs	r3, r2, r3
 8000d02:	2b02      	cmp	r3, #2
 8000d04:	d901      	bls.n	8000d0a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000d06:	2303      	movs	r3, #3
 8000d08:	e187      	b.n	800101a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d0a:	4b1b      	ldr	r3, [pc, #108]	; (8000d78 <HAL_RCC_OscConfig+0x240>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f003 0302 	and.w	r3, r3, #2
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d1f0      	bne.n	8000cf8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f003 0308 	and.w	r3, r3, #8
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d036      	beq.n	8000d90 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	695b      	ldr	r3, [r3, #20]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d016      	beq.n	8000d58 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d2a:	4b15      	ldr	r3, [pc, #84]	; (8000d80 <HAL_RCC_OscConfig+0x248>)
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d30:	f7ff fe10 	bl	8000954 <HAL_GetTick>
 8000d34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d36:	e008      	b.n	8000d4a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d38:	f7ff fe0c 	bl	8000954 <HAL_GetTick>
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	693b      	ldr	r3, [r7, #16]
 8000d40:	1ad3      	subs	r3, r2, r3
 8000d42:	2b02      	cmp	r3, #2
 8000d44:	d901      	bls.n	8000d4a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000d46:	2303      	movs	r3, #3
 8000d48:	e167      	b.n	800101a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d4a:	4b0b      	ldr	r3, [pc, #44]	; (8000d78 <HAL_RCC_OscConfig+0x240>)
 8000d4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d4e:	f003 0302 	and.w	r3, r3, #2
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d0f0      	beq.n	8000d38 <HAL_RCC_OscConfig+0x200>
 8000d56:	e01b      	b.n	8000d90 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d58:	4b09      	ldr	r3, [pc, #36]	; (8000d80 <HAL_RCC_OscConfig+0x248>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d5e:	f7ff fdf9 	bl	8000954 <HAL_GetTick>
 8000d62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d64:	e00e      	b.n	8000d84 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d66:	f7ff fdf5 	bl	8000954 <HAL_GetTick>
 8000d6a:	4602      	mov	r2, r0
 8000d6c:	693b      	ldr	r3, [r7, #16]
 8000d6e:	1ad3      	subs	r3, r2, r3
 8000d70:	2b02      	cmp	r3, #2
 8000d72:	d907      	bls.n	8000d84 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000d74:	2303      	movs	r3, #3
 8000d76:	e150      	b.n	800101a <HAL_RCC_OscConfig+0x4e2>
 8000d78:	40023800 	.word	0x40023800
 8000d7c:	42470000 	.word	0x42470000
 8000d80:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d84:	4b88      	ldr	r3, [pc, #544]	; (8000fa8 <HAL_RCC_OscConfig+0x470>)
 8000d86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d88:	f003 0302 	and.w	r3, r3, #2
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d1ea      	bne.n	8000d66 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f003 0304 	and.w	r3, r3, #4
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	f000 8097 	beq.w	8000ecc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000da2:	4b81      	ldr	r3, [pc, #516]	; (8000fa8 <HAL_RCC_OscConfig+0x470>)
 8000da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d10f      	bne.n	8000dce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	60bb      	str	r3, [r7, #8]
 8000db2:	4b7d      	ldr	r3, [pc, #500]	; (8000fa8 <HAL_RCC_OscConfig+0x470>)
 8000db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db6:	4a7c      	ldr	r2, [pc, #496]	; (8000fa8 <HAL_RCC_OscConfig+0x470>)
 8000db8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dbc:	6413      	str	r3, [r2, #64]	; 0x40
 8000dbe:	4b7a      	ldr	r3, [pc, #488]	; (8000fa8 <HAL_RCC_OscConfig+0x470>)
 8000dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dc6:	60bb      	str	r3, [r7, #8]
 8000dc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dce:	4b77      	ldr	r3, [pc, #476]	; (8000fac <HAL_RCC_OscConfig+0x474>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d118      	bne.n	8000e0c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000dda:	4b74      	ldr	r3, [pc, #464]	; (8000fac <HAL_RCC_OscConfig+0x474>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a73      	ldr	r2, [pc, #460]	; (8000fac <HAL_RCC_OscConfig+0x474>)
 8000de0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000de4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000de6:	f7ff fdb5 	bl	8000954 <HAL_GetTick>
 8000dea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dec:	e008      	b.n	8000e00 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000dee:	f7ff fdb1 	bl	8000954 <HAL_GetTick>
 8000df2:	4602      	mov	r2, r0
 8000df4:	693b      	ldr	r3, [r7, #16]
 8000df6:	1ad3      	subs	r3, r2, r3
 8000df8:	2b02      	cmp	r3, #2
 8000dfa:	d901      	bls.n	8000e00 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8000dfc:	2303      	movs	r3, #3
 8000dfe:	e10c      	b.n	800101a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e00:	4b6a      	ldr	r3, [pc, #424]	; (8000fac <HAL_RCC_OscConfig+0x474>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d0f0      	beq.n	8000dee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	689b      	ldr	r3, [r3, #8]
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d106      	bne.n	8000e22 <HAL_RCC_OscConfig+0x2ea>
 8000e14:	4b64      	ldr	r3, [pc, #400]	; (8000fa8 <HAL_RCC_OscConfig+0x470>)
 8000e16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e18:	4a63      	ldr	r2, [pc, #396]	; (8000fa8 <HAL_RCC_OscConfig+0x470>)
 8000e1a:	f043 0301 	orr.w	r3, r3, #1
 8000e1e:	6713      	str	r3, [r2, #112]	; 0x70
 8000e20:	e01c      	b.n	8000e5c <HAL_RCC_OscConfig+0x324>
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	689b      	ldr	r3, [r3, #8]
 8000e26:	2b05      	cmp	r3, #5
 8000e28:	d10c      	bne.n	8000e44 <HAL_RCC_OscConfig+0x30c>
 8000e2a:	4b5f      	ldr	r3, [pc, #380]	; (8000fa8 <HAL_RCC_OscConfig+0x470>)
 8000e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e2e:	4a5e      	ldr	r2, [pc, #376]	; (8000fa8 <HAL_RCC_OscConfig+0x470>)
 8000e30:	f043 0304 	orr.w	r3, r3, #4
 8000e34:	6713      	str	r3, [r2, #112]	; 0x70
 8000e36:	4b5c      	ldr	r3, [pc, #368]	; (8000fa8 <HAL_RCC_OscConfig+0x470>)
 8000e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e3a:	4a5b      	ldr	r2, [pc, #364]	; (8000fa8 <HAL_RCC_OscConfig+0x470>)
 8000e3c:	f043 0301 	orr.w	r3, r3, #1
 8000e40:	6713      	str	r3, [r2, #112]	; 0x70
 8000e42:	e00b      	b.n	8000e5c <HAL_RCC_OscConfig+0x324>
 8000e44:	4b58      	ldr	r3, [pc, #352]	; (8000fa8 <HAL_RCC_OscConfig+0x470>)
 8000e46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e48:	4a57      	ldr	r2, [pc, #348]	; (8000fa8 <HAL_RCC_OscConfig+0x470>)
 8000e4a:	f023 0301 	bic.w	r3, r3, #1
 8000e4e:	6713      	str	r3, [r2, #112]	; 0x70
 8000e50:	4b55      	ldr	r3, [pc, #340]	; (8000fa8 <HAL_RCC_OscConfig+0x470>)
 8000e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e54:	4a54      	ldr	r2, [pc, #336]	; (8000fa8 <HAL_RCC_OscConfig+0x470>)
 8000e56:	f023 0304 	bic.w	r3, r3, #4
 8000e5a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	689b      	ldr	r3, [r3, #8]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d015      	beq.n	8000e90 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e64:	f7ff fd76 	bl	8000954 <HAL_GetTick>
 8000e68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e6a:	e00a      	b.n	8000e82 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e6c:	f7ff fd72 	bl	8000954 <HAL_GetTick>
 8000e70:	4602      	mov	r2, r0
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	1ad3      	subs	r3, r2, r3
 8000e76:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d901      	bls.n	8000e82 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8000e7e:	2303      	movs	r3, #3
 8000e80:	e0cb      	b.n	800101a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e82:	4b49      	ldr	r3, [pc, #292]	; (8000fa8 <HAL_RCC_OscConfig+0x470>)
 8000e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e86:	f003 0302 	and.w	r3, r3, #2
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d0ee      	beq.n	8000e6c <HAL_RCC_OscConfig+0x334>
 8000e8e:	e014      	b.n	8000eba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e90:	f7ff fd60 	bl	8000954 <HAL_GetTick>
 8000e94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e96:	e00a      	b.n	8000eae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e98:	f7ff fd5c 	bl	8000954 <HAL_GetTick>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	1ad3      	subs	r3, r2, r3
 8000ea2:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d901      	bls.n	8000eae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8000eaa:	2303      	movs	r3, #3
 8000eac:	e0b5      	b.n	800101a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000eae:	4b3e      	ldr	r3, [pc, #248]	; (8000fa8 <HAL_RCC_OscConfig+0x470>)
 8000eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000eb2:	f003 0302 	and.w	r3, r3, #2
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d1ee      	bne.n	8000e98 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000eba:	7dfb      	ldrb	r3, [r7, #23]
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d105      	bne.n	8000ecc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ec0:	4b39      	ldr	r3, [pc, #228]	; (8000fa8 <HAL_RCC_OscConfig+0x470>)
 8000ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec4:	4a38      	ldr	r2, [pc, #224]	; (8000fa8 <HAL_RCC_OscConfig+0x470>)
 8000ec6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000eca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	699b      	ldr	r3, [r3, #24]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	f000 80a1 	beq.w	8001018 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000ed6:	4b34      	ldr	r3, [pc, #208]	; (8000fa8 <HAL_RCC_OscConfig+0x470>)
 8000ed8:	689b      	ldr	r3, [r3, #8]
 8000eda:	f003 030c 	and.w	r3, r3, #12
 8000ede:	2b08      	cmp	r3, #8
 8000ee0:	d05c      	beq.n	8000f9c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	699b      	ldr	r3, [r3, #24]
 8000ee6:	2b02      	cmp	r3, #2
 8000ee8:	d141      	bne.n	8000f6e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000eea:	4b31      	ldr	r3, [pc, #196]	; (8000fb0 <HAL_RCC_OscConfig+0x478>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ef0:	f7ff fd30 	bl	8000954 <HAL_GetTick>
 8000ef4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ef6:	e008      	b.n	8000f0a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ef8:	f7ff fd2c 	bl	8000954 <HAL_GetTick>
 8000efc:	4602      	mov	r2, r0
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	1ad3      	subs	r3, r2, r3
 8000f02:	2b02      	cmp	r3, #2
 8000f04:	d901      	bls.n	8000f0a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8000f06:	2303      	movs	r3, #3
 8000f08:	e087      	b.n	800101a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f0a:	4b27      	ldr	r3, [pc, #156]	; (8000fa8 <HAL_RCC_OscConfig+0x470>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d1f0      	bne.n	8000ef8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	69da      	ldr	r2, [r3, #28]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6a1b      	ldr	r3, [r3, #32]
 8000f1e:	431a      	orrs	r2, r3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f24:	019b      	lsls	r3, r3, #6
 8000f26:	431a      	orrs	r2, r3
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f2c:	085b      	lsrs	r3, r3, #1
 8000f2e:	3b01      	subs	r3, #1
 8000f30:	041b      	lsls	r3, r3, #16
 8000f32:	431a      	orrs	r2, r3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f38:	061b      	lsls	r3, r3, #24
 8000f3a:	491b      	ldr	r1, [pc, #108]	; (8000fa8 <HAL_RCC_OscConfig+0x470>)
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000f40:	4b1b      	ldr	r3, [pc, #108]	; (8000fb0 <HAL_RCC_OscConfig+0x478>)
 8000f42:	2201      	movs	r2, #1
 8000f44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f46:	f7ff fd05 	bl	8000954 <HAL_GetTick>
 8000f4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f4c:	e008      	b.n	8000f60 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f4e:	f7ff fd01 	bl	8000954 <HAL_GetTick>
 8000f52:	4602      	mov	r2, r0
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	1ad3      	subs	r3, r2, r3
 8000f58:	2b02      	cmp	r3, #2
 8000f5a:	d901      	bls.n	8000f60 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8000f5c:	2303      	movs	r3, #3
 8000f5e:	e05c      	b.n	800101a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f60:	4b11      	ldr	r3, [pc, #68]	; (8000fa8 <HAL_RCC_OscConfig+0x470>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d0f0      	beq.n	8000f4e <HAL_RCC_OscConfig+0x416>
 8000f6c:	e054      	b.n	8001018 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f6e:	4b10      	ldr	r3, [pc, #64]	; (8000fb0 <HAL_RCC_OscConfig+0x478>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f74:	f7ff fcee 	bl	8000954 <HAL_GetTick>
 8000f78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f7a:	e008      	b.n	8000f8e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f7c:	f7ff fcea 	bl	8000954 <HAL_GetTick>
 8000f80:	4602      	mov	r2, r0
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	2b02      	cmp	r3, #2
 8000f88:	d901      	bls.n	8000f8e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	e045      	b.n	800101a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f8e:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <HAL_RCC_OscConfig+0x470>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d1f0      	bne.n	8000f7c <HAL_RCC_OscConfig+0x444>
 8000f9a:	e03d      	b.n	8001018 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	699b      	ldr	r3, [r3, #24]
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d107      	bne.n	8000fb4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	e038      	b.n	800101a <HAL_RCC_OscConfig+0x4e2>
 8000fa8:	40023800 	.word	0x40023800
 8000fac:	40007000 	.word	0x40007000
 8000fb0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8000fb4:	4b1b      	ldr	r3, [pc, #108]	; (8001024 <HAL_RCC_OscConfig+0x4ec>)
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	699b      	ldr	r3, [r3, #24]
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d028      	beq.n	8001014 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	d121      	bne.n	8001014 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fda:	429a      	cmp	r2, r3
 8000fdc:	d11a      	bne.n	8001014 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000fde:	68fa      	ldr	r2, [r7, #12]
 8000fe0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	687a      	ldr	r2, [r7, #4]
 8000fe8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000fea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d111      	bne.n	8001014 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ffa:	085b      	lsrs	r3, r3, #1
 8000ffc:	3b01      	subs	r3, #1
 8000ffe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001000:	429a      	cmp	r2, r3
 8001002:	d107      	bne.n	8001014 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800100e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001010:	429a      	cmp	r2, r3
 8001012:	d001      	beq.n	8001018 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001014:	2301      	movs	r3, #1
 8001016:	e000      	b.n	800101a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001018:	2300      	movs	r3, #0
}
 800101a:	4618      	mov	r0, r3
 800101c:	3718      	adds	r7, #24
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	40023800 	.word	0x40023800

08001028 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d101      	bne.n	800103c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001038:	2301      	movs	r3, #1
 800103a:	e0cc      	b.n	80011d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800103c:	4b68      	ldr	r3, [pc, #416]	; (80011e0 <HAL_RCC_ClockConfig+0x1b8>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f003 0307 	and.w	r3, r3, #7
 8001044:	683a      	ldr	r2, [r7, #0]
 8001046:	429a      	cmp	r2, r3
 8001048:	d90c      	bls.n	8001064 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800104a:	4b65      	ldr	r3, [pc, #404]	; (80011e0 <HAL_RCC_ClockConfig+0x1b8>)
 800104c:	683a      	ldr	r2, [r7, #0]
 800104e:	b2d2      	uxtb	r2, r2
 8001050:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001052:	4b63      	ldr	r3, [pc, #396]	; (80011e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f003 0307 	and.w	r3, r3, #7
 800105a:	683a      	ldr	r2, [r7, #0]
 800105c:	429a      	cmp	r2, r3
 800105e:	d001      	beq.n	8001064 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001060:	2301      	movs	r3, #1
 8001062:	e0b8      	b.n	80011d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f003 0302 	and.w	r3, r3, #2
 800106c:	2b00      	cmp	r3, #0
 800106e:	d020      	beq.n	80010b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f003 0304 	and.w	r3, r3, #4
 8001078:	2b00      	cmp	r3, #0
 800107a:	d005      	beq.n	8001088 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800107c:	4b59      	ldr	r3, [pc, #356]	; (80011e4 <HAL_RCC_ClockConfig+0x1bc>)
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	4a58      	ldr	r2, [pc, #352]	; (80011e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001082:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001086:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f003 0308 	and.w	r3, r3, #8
 8001090:	2b00      	cmp	r3, #0
 8001092:	d005      	beq.n	80010a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001094:	4b53      	ldr	r3, [pc, #332]	; (80011e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001096:	689b      	ldr	r3, [r3, #8]
 8001098:	4a52      	ldr	r2, [pc, #328]	; (80011e4 <HAL_RCC_ClockConfig+0x1bc>)
 800109a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800109e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010a0:	4b50      	ldr	r3, [pc, #320]	; (80011e4 <HAL_RCC_ClockConfig+0x1bc>)
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	494d      	ldr	r1, [pc, #308]	; (80011e4 <HAL_RCC_ClockConfig+0x1bc>)
 80010ae:	4313      	orrs	r3, r2
 80010b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d044      	beq.n	8001148 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d107      	bne.n	80010d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010c6:	4b47      	ldr	r3, [pc, #284]	; (80011e4 <HAL_RCC_ClockConfig+0x1bc>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d119      	bne.n	8001106 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	e07f      	b.n	80011d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	2b02      	cmp	r3, #2
 80010dc:	d003      	beq.n	80010e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010e2:	2b03      	cmp	r3, #3
 80010e4:	d107      	bne.n	80010f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010e6:	4b3f      	ldr	r3, [pc, #252]	; (80011e4 <HAL_RCC_ClockConfig+0x1bc>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d109      	bne.n	8001106 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	e06f      	b.n	80011d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010f6:	4b3b      	ldr	r3, [pc, #236]	; (80011e4 <HAL_RCC_ClockConfig+0x1bc>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f003 0302 	and.w	r3, r3, #2
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d101      	bne.n	8001106 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	e067      	b.n	80011d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001106:	4b37      	ldr	r3, [pc, #220]	; (80011e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	f023 0203 	bic.w	r2, r3, #3
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	4934      	ldr	r1, [pc, #208]	; (80011e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001114:	4313      	orrs	r3, r2
 8001116:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001118:	f7ff fc1c 	bl	8000954 <HAL_GetTick>
 800111c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800111e:	e00a      	b.n	8001136 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001120:	f7ff fc18 	bl	8000954 <HAL_GetTick>
 8001124:	4602      	mov	r2, r0
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	f241 3288 	movw	r2, #5000	; 0x1388
 800112e:	4293      	cmp	r3, r2
 8001130:	d901      	bls.n	8001136 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001132:	2303      	movs	r3, #3
 8001134:	e04f      	b.n	80011d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001136:	4b2b      	ldr	r3, [pc, #172]	; (80011e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001138:	689b      	ldr	r3, [r3, #8]
 800113a:	f003 020c 	and.w	r2, r3, #12
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	429a      	cmp	r2, r3
 8001146:	d1eb      	bne.n	8001120 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001148:	4b25      	ldr	r3, [pc, #148]	; (80011e0 <HAL_RCC_ClockConfig+0x1b8>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f003 0307 	and.w	r3, r3, #7
 8001150:	683a      	ldr	r2, [r7, #0]
 8001152:	429a      	cmp	r2, r3
 8001154:	d20c      	bcs.n	8001170 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001156:	4b22      	ldr	r3, [pc, #136]	; (80011e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001158:	683a      	ldr	r2, [r7, #0]
 800115a:	b2d2      	uxtb	r2, r2
 800115c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800115e:	4b20      	ldr	r3, [pc, #128]	; (80011e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f003 0307 	and.w	r3, r3, #7
 8001166:	683a      	ldr	r2, [r7, #0]
 8001168:	429a      	cmp	r2, r3
 800116a:	d001      	beq.n	8001170 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800116c:	2301      	movs	r3, #1
 800116e:	e032      	b.n	80011d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f003 0304 	and.w	r3, r3, #4
 8001178:	2b00      	cmp	r3, #0
 800117a:	d008      	beq.n	800118e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800117c:	4b19      	ldr	r3, [pc, #100]	; (80011e4 <HAL_RCC_ClockConfig+0x1bc>)
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	4916      	ldr	r1, [pc, #88]	; (80011e4 <HAL_RCC_ClockConfig+0x1bc>)
 800118a:	4313      	orrs	r3, r2
 800118c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f003 0308 	and.w	r3, r3, #8
 8001196:	2b00      	cmp	r3, #0
 8001198:	d009      	beq.n	80011ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800119a:	4b12      	ldr	r3, [pc, #72]	; (80011e4 <HAL_RCC_ClockConfig+0x1bc>)
 800119c:	689b      	ldr	r3, [r3, #8]
 800119e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	691b      	ldr	r3, [r3, #16]
 80011a6:	00db      	lsls	r3, r3, #3
 80011a8:	490e      	ldr	r1, [pc, #56]	; (80011e4 <HAL_RCC_ClockConfig+0x1bc>)
 80011aa:	4313      	orrs	r3, r2
 80011ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80011ae:	f000 f821 	bl	80011f4 <HAL_RCC_GetSysClockFreq>
 80011b2:	4602      	mov	r2, r0
 80011b4:	4b0b      	ldr	r3, [pc, #44]	; (80011e4 <HAL_RCC_ClockConfig+0x1bc>)
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	091b      	lsrs	r3, r3, #4
 80011ba:	f003 030f 	and.w	r3, r3, #15
 80011be:	490a      	ldr	r1, [pc, #40]	; (80011e8 <HAL_RCC_ClockConfig+0x1c0>)
 80011c0:	5ccb      	ldrb	r3, [r1, r3]
 80011c2:	fa22 f303 	lsr.w	r3, r2, r3
 80011c6:	4a09      	ldr	r2, [pc, #36]	; (80011ec <HAL_RCC_ClockConfig+0x1c4>)
 80011c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80011ca:	4b09      	ldr	r3, [pc, #36]	; (80011f0 <HAL_RCC_ClockConfig+0x1c8>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4618      	mov	r0, r3
 80011d0:	f7ff fb7c 	bl	80008cc <HAL_InitTick>

  return HAL_OK;
 80011d4:	2300      	movs	r3, #0
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3710      	adds	r7, #16
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	40023c00 	.word	0x40023c00
 80011e4:	40023800 	.word	0x40023800
 80011e8:	080013f0 	.word	0x080013f0
 80011ec:	20000000 	.word	0x20000000
 80011f0:	20000004 	.word	0x20000004

080011f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80011f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80011f8:	b090      	sub	sp, #64	; 0x40
 80011fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80011fc:	2300      	movs	r3, #0
 80011fe:	637b      	str	r3, [r7, #52]	; 0x34
 8001200:	2300      	movs	r3, #0
 8001202:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001204:	2300      	movs	r3, #0
 8001206:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001208:	2300      	movs	r3, #0
 800120a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800120c:	4b59      	ldr	r3, [pc, #356]	; (8001374 <HAL_RCC_GetSysClockFreq+0x180>)
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	f003 030c 	and.w	r3, r3, #12
 8001214:	2b08      	cmp	r3, #8
 8001216:	d00d      	beq.n	8001234 <HAL_RCC_GetSysClockFreq+0x40>
 8001218:	2b08      	cmp	r3, #8
 800121a:	f200 80a1 	bhi.w	8001360 <HAL_RCC_GetSysClockFreq+0x16c>
 800121e:	2b00      	cmp	r3, #0
 8001220:	d002      	beq.n	8001228 <HAL_RCC_GetSysClockFreq+0x34>
 8001222:	2b04      	cmp	r3, #4
 8001224:	d003      	beq.n	800122e <HAL_RCC_GetSysClockFreq+0x3a>
 8001226:	e09b      	b.n	8001360 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001228:	4b53      	ldr	r3, [pc, #332]	; (8001378 <HAL_RCC_GetSysClockFreq+0x184>)
 800122a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800122c:	e09b      	b.n	8001366 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800122e:	4b53      	ldr	r3, [pc, #332]	; (800137c <HAL_RCC_GetSysClockFreq+0x188>)
 8001230:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001232:	e098      	b.n	8001366 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001234:	4b4f      	ldr	r3, [pc, #316]	; (8001374 <HAL_RCC_GetSysClockFreq+0x180>)
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800123c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800123e:	4b4d      	ldr	r3, [pc, #308]	; (8001374 <HAL_RCC_GetSysClockFreq+0x180>)
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d028      	beq.n	800129c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800124a:	4b4a      	ldr	r3, [pc, #296]	; (8001374 <HAL_RCC_GetSysClockFreq+0x180>)
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	099b      	lsrs	r3, r3, #6
 8001250:	2200      	movs	r2, #0
 8001252:	623b      	str	r3, [r7, #32]
 8001254:	627a      	str	r2, [r7, #36]	; 0x24
 8001256:	6a3b      	ldr	r3, [r7, #32]
 8001258:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800125c:	2100      	movs	r1, #0
 800125e:	4b47      	ldr	r3, [pc, #284]	; (800137c <HAL_RCC_GetSysClockFreq+0x188>)
 8001260:	fb03 f201 	mul.w	r2, r3, r1
 8001264:	2300      	movs	r3, #0
 8001266:	fb00 f303 	mul.w	r3, r0, r3
 800126a:	4413      	add	r3, r2
 800126c:	4a43      	ldr	r2, [pc, #268]	; (800137c <HAL_RCC_GetSysClockFreq+0x188>)
 800126e:	fba0 1202 	umull	r1, r2, r0, r2
 8001272:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001274:	460a      	mov	r2, r1
 8001276:	62ba      	str	r2, [r7, #40]	; 0x28
 8001278:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800127a:	4413      	add	r3, r2
 800127c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800127e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001280:	2200      	movs	r2, #0
 8001282:	61bb      	str	r3, [r7, #24]
 8001284:	61fa      	str	r2, [r7, #28]
 8001286:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800128a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800128e:	f7fe ffa3 	bl	80001d8 <__aeabi_uldivmod>
 8001292:	4602      	mov	r2, r0
 8001294:	460b      	mov	r3, r1
 8001296:	4613      	mov	r3, r2
 8001298:	63fb      	str	r3, [r7, #60]	; 0x3c
 800129a:	e053      	b.n	8001344 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800129c:	4b35      	ldr	r3, [pc, #212]	; (8001374 <HAL_RCC_GetSysClockFreq+0x180>)
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	099b      	lsrs	r3, r3, #6
 80012a2:	2200      	movs	r2, #0
 80012a4:	613b      	str	r3, [r7, #16]
 80012a6:	617a      	str	r2, [r7, #20]
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80012ae:	f04f 0b00 	mov.w	fp, #0
 80012b2:	4652      	mov	r2, sl
 80012b4:	465b      	mov	r3, fp
 80012b6:	f04f 0000 	mov.w	r0, #0
 80012ba:	f04f 0100 	mov.w	r1, #0
 80012be:	0159      	lsls	r1, r3, #5
 80012c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80012c4:	0150      	lsls	r0, r2, #5
 80012c6:	4602      	mov	r2, r0
 80012c8:	460b      	mov	r3, r1
 80012ca:	ebb2 080a 	subs.w	r8, r2, sl
 80012ce:	eb63 090b 	sbc.w	r9, r3, fp
 80012d2:	f04f 0200 	mov.w	r2, #0
 80012d6:	f04f 0300 	mov.w	r3, #0
 80012da:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80012de:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80012e2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80012e6:	ebb2 0408 	subs.w	r4, r2, r8
 80012ea:	eb63 0509 	sbc.w	r5, r3, r9
 80012ee:	f04f 0200 	mov.w	r2, #0
 80012f2:	f04f 0300 	mov.w	r3, #0
 80012f6:	00eb      	lsls	r3, r5, #3
 80012f8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80012fc:	00e2      	lsls	r2, r4, #3
 80012fe:	4614      	mov	r4, r2
 8001300:	461d      	mov	r5, r3
 8001302:	eb14 030a 	adds.w	r3, r4, sl
 8001306:	603b      	str	r3, [r7, #0]
 8001308:	eb45 030b 	adc.w	r3, r5, fp
 800130c:	607b      	str	r3, [r7, #4]
 800130e:	f04f 0200 	mov.w	r2, #0
 8001312:	f04f 0300 	mov.w	r3, #0
 8001316:	e9d7 4500 	ldrd	r4, r5, [r7]
 800131a:	4629      	mov	r1, r5
 800131c:	028b      	lsls	r3, r1, #10
 800131e:	4621      	mov	r1, r4
 8001320:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001324:	4621      	mov	r1, r4
 8001326:	028a      	lsls	r2, r1, #10
 8001328:	4610      	mov	r0, r2
 800132a:	4619      	mov	r1, r3
 800132c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800132e:	2200      	movs	r2, #0
 8001330:	60bb      	str	r3, [r7, #8]
 8001332:	60fa      	str	r2, [r7, #12]
 8001334:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001338:	f7fe ff4e 	bl	80001d8 <__aeabi_uldivmod>
 800133c:	4602      	mov	r2, r0
 800133e:	460b      	mov	r3, r1
 8001340:	4613      	mov	r3, r2
 8001342:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001344:	4b0b      	ldr	r3, [pc, #44]	; (8001374 <HAL_RCC_GetSysClockFreq+0x180>)
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	0c1b      	lsrs	r3, r3, #16
 800134a:	f003 0303 	and.w	r3, r3, #3
 800134e:	3301      	adds	r3, #1
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001354:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001358:	fbb2 f3f3 	udiv	r3, r2, r3
 800135c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800135e:	e002      	b.n	8001366 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001360:	4b05      	ldr	r3, [pc, #20]	; (8001378 <HAL_RCC_GetSysClockFreq+0x184>)
 8001362:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001364:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001368:	4618      	mov	r0, r3
 800136a:	3740      	adds	r7, #64	; 0x40
 800136c:	46bd      	mov	sp, r7
 800136e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001372:	bf00      	nop
 8001374:	40023800 	.word	0x40023800
 8001378:	00f42400 	.word	0x00f42400
 800137c:	017d7840 	.word	0x017d7840

08001380 <memset>:
 8001380:	4402      	add	r2, r0
 8001382:	4603      	mov	r3, r0
 8001384:	4293      	cmp	r3, r2
 8001386:	d100      	bne.n	800138a <memset+0xa>
 8001388:	4770      	bx	lr
 800138a:	f803 1b01 	strb.w	r1, [r3], #1
 800138e:	e7f9      	b.n	8001384 <memset+0x4>

08001390 <__libc_init_array>:
 8001390:	b570      	push	{r4, r5, r6, lr}
 8001392:	4d0d      	ldr	r5, [pc, #52]	; (80013c8 <__libc_init_array+0x38>)
 8001394:	4c0d      	ldr	r4, [pc, #52]	; (80013cc <__libc_init_array+0x3c>)
 8001396:	1b64      	subs	r4, r4, r5
 8001398:	10a4      	asrs	r4, r4, #2
 800139a:	2600      	movs	r6, #0
 800139c:	42a6      	cmp	r6, r4
 800139e:	d109      	bne.n	80013b4 <__libc_init_array+0x24>
 80013a0:	4d0b      	ldr	r5, [pc, #44]	; (80013d0 <__libc_init_array+0x40>)
 80013a2:	4c0c      	ldr	r4, [pc, #48]	; (80013d4 <__libc_init_array+0x44>)
 80013a4:	f000 f818 	bl	80013d8 <_init>
 80013a8:	1b64      	subs	r4, r4, r5
 80013aa:	10a4      	asrs	r4, r4, #2
 80013ac:	2600      	movs	r6, #0
 80013ae:	42a6      	cmp	r6, r4
 80013b0:	d105      	bne.n	80013be <__libc_init_array+0x2e>
 80013b2:	bd70      	pop	{r4, r5, r6, pc}
 80013b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80013b8:	4798      	blx	r3
 80013ba:	3601      	adds	r6, #1
 80013bc:	e7ee      	b.n	800139c <__libc_init_array+0xc>
 80013be:	f855 3b04 	ldr.w	r3, [r5], #4
 80013c2:	4798      	blx	r3
 80013c4:	3601      	adds	r6, #1
 80013c6:	e7f2      	b.n	80013ae <__libc_init_array+0x1e>
 80013c8:	08001408 	.word	0x08001408
 80013cc:	08001408 	.word	0x08001408
 80013d0:	08001408 	.word	0x08001408
 80013d4:	0800140c 	.word	0x0800140c

080013d8 <_init>:
 80013d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013da:	bf00      	nop
 80013dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013de:	bc08      	pop	{r3}
 80013e0:	469e      	mov	lr, r3
 80013e2:	4770      	bx	lr

080013e4 <_fini>:
 80013e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013e6:	bf00      	nop
 80013e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013ea:	bc08      	pop	{r3}
 80013ec:	469e      	mov	lr, r3
 80013ee:	4770      	bx	lr
